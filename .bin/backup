#!/bin/sh

if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
	echo "usage: $0 <age public key> <config file> <backup dir>"
	exit 1
fi

pub_key="$1"
config_file="$2"
backup_base_dir="$3"
backup_dir="$backup_base_dir/$(date +%Y)/$(date +%m)/$(date +%d)"
timestamp=$(date +%s)

rm -rf "$backup_base_dir"
mkdir -p "$backup_dir"
chmod 700 "$backup_dir"

backup_file() {
	local in_file="$1"
	local out_file="$2.$timestamp.gz.age"
	local ssh_key="$3"
	local ssh_addr="$4"

	if [ -n "$ssh_key" ] && [ -n "$ssh_addr" ]; then
		scp -i "$ssh_key" "$ssh_addr":"$in_file" /dev/stdout \
			| gzip | age -r "$pub_key" >"$backup_dir/$out_file"
	else
		cat "$in_file" | gzip | age -r "$pub_key" >"$backup_dir/$out_file"
	fi
}

backup_dir() {
	local in_dir="$1"
	local dir=$(dirname $in_dir)
	local base=$(basename $in_dir)
	local out_file="$2.$timestamp.tar.gz.age"
	local ssh_key="$3"
	local ssh_addr="$4"

	if [ -n "$ssh_key" ] && [ -n "$ssh_addr" ]; then
		ssh -i "$ssh_key" "$ssh_addr" "tar cfz - -C $dir $base" \
			| age -r "$pub_key" >"$backup_dir/$out_file"
	else
		tar cfz - -C "$dir" "$base" | age -r "$pub_key" >"$backup_dir/$out_file"
	fi
}

backup_pg() {
	local user="$1"
	local pass="$2"
	local db="$3"
	local out_file="$4.$timestamp.gz.age"
	local ssh_key="$5"
	local ssh_addr="$6"
	local ssh_sock="/tmp/backup_ssh_sock"
	local port="5432"

	if [ -f "$ssh_sock" ]; then
		echo "error: $ssh_sock does already exist"
		exit 1
	fi

	if [ -n "$ssh_key" ] && [ -n "$ssh_addr" ]; then
		ssh -f -N -M -S "$ssh_sock" -i "$ssh_key" "$ssh_addr" -L 5544:localhost:5432
		port="5544"
	fi

	PGPASSWORD=$pass pg_dump -U "$user" -h "localhost" -p "$port" "$db" | \
		gzip | age -r "$pub_key" >"$backup_dir/$out_file"

	if [ -n "$ssh_key" ] && [ -n "$ssh_addr" ]; then
		ssh -S "$ssh_sock" -O exit "$addr" >/dev/null 2>&1
	fi
}

sync_dir() {
	local in_dir="$1"
	local dir=$(dirname $in_dir)
	local base=$(basename $in_dir)
	local out_dir="$2"
	local ssh_key="$3"
	local ssh_addr="$4"

	rsync -az -e "ssh -i $ssh_key" "$ssh_addr:$in_dir" "$out_dir"
}

rclone_copy() {
	local arg_0="$1"
	local arg_1="$2"

	if [ -n "$arg_0" ] && [ -z "$arg_1" ]; then
		rclone copy --progress "$backup_base_dir" "$arg_0"
	elif [ -n "$arg_0" ] && [ -n "$arg_1" ]; then
		rclone copy --progress "$arg_0" "$arg_1"
	fi
}

grep -q "^backup_file " $config_file
if [ $? -eq 0 ]; then
	echo "backing up files"
	grep "^backup_file " $config_file | while read _ in_file out_file ssh_key ssh_addr; do
		backup_file "$in_file" "$out_file" "$ssh_key" "$ssh_addr"
	done
fi

grep -q "^backup_dir " $config_file
if [ $? -eq 0 ]; then
	echo "backing up directories"
	grep "^backup_dir " $config_file | while read _ in_dir out_file ssh_key ssh_addr; do
		backup_dir "$in_dir" "$out_file" "$ssh_key" "$ssh_addr"
	done
fi

grep -q "^backup_pg " $config_file
if [ $? -eq 0 ]; then
	echo "backing up postgres databases"
	grep "^backup_pg " $config_file | while read _ user pass db out_file ssh_key ssh_addr; do
		backup_pg "$user" "$pass" "$db" "$out_file" "$ssh_key" "$ssh_addr"
	done
fi

grep -q "^sync_dir " $config_file
if [ $? -eq 0 ]; then
	echo "syncing directories"
	grep "^sync_dir " $config_file | while read _ in_dir out_dir ssh_key ssh_addr; do
		sync_dir "$in_dir" "$out_dir" "$ssh_key" "$ssh_addr"
	done
fi

grep -q "^rclone_copy " $config_file
if [ $? -eq 0 ]; then
	echo "rclone copy directories"
	grep "^rclone_copy " $config_file | while read _ arg_0 arg_1; do
		rclone_copy "$arg_0" "$arg_1"
	done
fi

echo "cleaning up"
rm -rf "$backup_base_dir"
